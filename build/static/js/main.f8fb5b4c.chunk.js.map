{"version":3,"sources":["Components/Loader/index.tsx","Components/Counter/CounterValue.tsx","Components/Counter/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Loader","className","ConterValue","counter","Counter","useState","count","setCount","loading","setLoading","timer","useRef","syncCount","a","payload","virajsingh","axios","put","data","updateCount","window","clearTimeout","current","setTimeout","fetchCount","get","useEffect","then","onClick","style","marginLeft","type","value","onChange","e","Number","isNaN","target","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","baseURL","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAOeA,EALA,WACX,OAAO,qBAAKC,UAAU,YCcXC,G,MAboC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClD,OAAO,sBAAKF,UAAU,gBAAf,UAEH,qBAAKA,UAAU,QAAf,2BAIA,8BACKE,SCkGEC,EAnGW,WAEtB,IAF4B,EAIFC,mBAAiB,GAJf,mBAIrBC,EAJqB,KAIdC,EAJc,OAMEF,oBAAkB,GANpB,mBAMrBG,EANqB,KAMZC,EANY,KAQtBC,EAAQC,iBAAY,MAEpBC,EAAS,uCAAG,8CAAAC,EAAA,yDAAOP,EAAP,+BAAuB,EAAvB,WAEcA,GAAS,IAFvB,wDAIVG,GAAW,GACLK,EAA4B,CAC9BC,WAAYT,GANN,SAQ4BU,IAAMC,IAAI,kBAAmBH,GARzD,gBAQFI,EARE,EAQFA,KACRX,EAASW,EAAKH,YATJ,yBAWVN,GAAW,GAXD,2EAAH,qDAgBTU,EAAW,uCAAG,WAAOb,GAAP,SAAAO,EAAA,sDAEhBN,EAASD,GAETc,OAAOC,aAAaX,EAAMY,SAE1BZ,EAAMY,QAAUF,OAAOG,WAAP,sBAAkB,4BAAAV,EAAA,sEAE1BJ,GAAW,GACLK,EAA4B,CAC9BC,WAAYT,GAJU,SAMpBU,IAAMC,IAAI,kBAAmBH,GANT,uBAQ1BL,GAAW,GARe,uEAU/B,KAhBa,2CAAH,sDAqBXe,EAAU,uCAAG,8BAAAX,EAAA,sEAEXJ,GAAW,GAFA,SAG2BO,IAAMS,IAAI,mBAHrC,gBAGHP,EAHG,EAGHA,KACRX,EAASW,EAAKH,YAJH,uBAMXN,GAAW,GANA,yEAAH,qDAchB,OAJAiB,qBAAU,WACNd,EAAU,GAAGe,KAAKH,KACnB,IAEI,sBAAKvB,UAAU,kBAAf,UAEC,qBAAKA,UAAU,UAAf,SAEQO,GACA,qCACI,cAAC,EAAD,IACA,sBAAMP,UAAU,OAAhB,uCAQhB,sBAAKA,UAAU,UAAf,UACI,wBAAQA,UAAU,YAAY2B,QAAS,kBAAMhB,EAAUN,EAAQ,IAA/D,iBAGA,qBAAKL,UAAU,QAAf,SACI,uBACI4B,MAAO,CAAEC,WAAYxB,GAAS,GAAKA,GAAS,IAAM,SAAW,OAAS,QACtEyB,KAAK,OAAOC,MAAO1B,EAAO2B,SAAU,SAACC,GAC7BC,OAAOC,OAAOF,EAAEG,OAAOL,SAAWE,EAAEG,OAAOL,MAlFjD,KAqFEb,GAAae,EAAEG,OAAOL,YAIlC,wBAAQ/B,UAAU,YAAY2B,QAAS,kBAAMhB,EAAUN,EAAQ,IAA/D,oBAIJ,cAAC,EAAD,CAAaH,QAASG,QClGfgC,EAJO,kBAAM,qBAAKrC,UAAU,MAAf,SAC1B,cAAC,EAAD,OCSasC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdxB,IAAM+B,SAASC,QAAU,sDAGzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.f8fb5b4c.chunk.js","sourcesContent":["import './loader.scss';\n\nconst Loader = () => {\n    return <div className=\"loader\">\n    </div>\n}\n\nexport default Loader","import React from \"react\"\n\nimport './countervalue.scss';\n\nconst ConterValue: React.FC<{ counter: number }> = ({ counter }) => {\n    return <div className=\"counter-value\">\n\n        <div className=\"label\">\n            Counter Value\n        </div>\n\n        <div>\n            {counter}\n        </div>\n    </div>\n}\n\nexport default ConterValue;","import React, { useEffect, useRef, useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport './counter.scss'\nimport Loader from '../Loader';\nimport ConterValue from './CounterValue';\n\ninterface CounterInterface {\n    virajsingh: number\n};\n\n\nconst Counter: React.FC = () => {\n\n    const max_value = 999;\n\n    const [count, setCount] = useState<number>(0);\n\n    const [loading, setLoading] = useState<boolean>(false);\n\n    const timer = useRef<any>(null);\n\n    const syncCount = async (count: number = 1): Promise<void> => {\n        try {\n            if (max_value > 1000 || count < -10) return;\n\n            setLoading(true);\n            const payload: CounterInterface = {\n                virajsingh: count\n            };\n            const { data }: AxiosResponse = await axios.put('/front-end.json', payload);\n            setCount(data.virajsingh)\n        } finally {\n            setLoading(false);\n        }\n    }\n\n\n    const updateCount = async (count: number): Promise<void> => {\n\n        setCount(count);\n\n        window.clearTimeout(timer.current);\n\n        timer.current = window.setTimeout(async () => {\n            try {\n                setLoading(true);\n                const payload: CounterInterface = {\n                    virajsingh: count\n                };\n                await axios.put('/front-end.json', payload);\n            } finally {\n                setLoading(false);\n            }\n        }, 1e3);\n\n    }\n\n\n    const fetchCount = async (): Promise<void> => {\n        try {\n            setLoading(true);\n            const { data }: AxiosResponse = await axios.get('/front-end.json');\n            setCount(data.virajsingh)\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    useEffect(() => {\n        syncCount(1).then(fetchCount);\n    }, []);\n\n    return <div className=\"counter_wrapper\">\n        {\n            <div className=\"loading\">\n                {\n                    loading &&\n                    <>\n                        <Loader />\n                        <span className=\"text\">\n                            Saving Counter Value\n                        </span>\n                    </>\n                }\n            </div>\n        }\n\n        <div className=\"counter\">\n            <button className=\"decrement\" onClick={() => syncCount(count - 1)}> - </button>\n\n\n            <div className=\"count\">\n                <input\n                    style={{ marginLeft: count >= 10 ? count >= 100 ? '1.5rem' : '2rem' : '4rem' }}\n                    type=\"text\" value={count} onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        if (Number.isNaN(+e.target.value) || +e.target.value > max_value) {\n                            return\n                        }\n                        updateCount(+e.target.value);\n                    }} />\n            </div>\n\n            <button className=\"increment\" onClick={() => syncCount(count + 1)}> + </button>\n\n        </div>\n\n        <ConterValue counter={count} />\n    </div>\n}\n\nexport default Counter;\n","import React from 'react';\nimport './App.css';\nimport Counter from './Components/Counter';\n\nconst App: React.FC = () => <div className=\"App\">\n  <Counter />\n</div>\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport axios, { } from 'axios';\naxios.defaults.baseURL = 'https://interview-8e4c5-default-rtdb.firebaseio.com';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}